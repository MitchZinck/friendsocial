// Code generated by MockGen. DO NOT EDIT.
// Source: activity_locations/activity_locations_handler.go

// Package test_activity_locations is a generated GoMock package.
package test_activity_locations

import (
	activity_locations "friendsocial/activity_locations"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockActivityLocationService is a mock of ActivityLocationService interface.
type MockActivityLocationService struct {
	ctrl     *gomock.Controller
	recorder *MockActivityLocationServiceMockRecorder
}

// MockActivityLocationServiceMockRecorder is the mock recorder for MockActivityLocationService.
type MockActivityLocationServiceMockRecorder struct {
	mock *MockActivityLocationService
}

// NewMockActivityLocationService creates a new mock instance.
func NewMockActivityLocationService(ctrl *gomock.Controller) *MockActivityLocationService {
	mock := &MockActivityLocationService{ctrl: ctrl}
	mock.recorder = &MockActivityLocationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityLocationService) EXPECT() *MockActivityLocationServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockActivityLocationService) Create(activityLocation activity_locations.ActivityLocation) (activity_locations.ActivityLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", activityLocation)
	ret0, _ := ret[0].(activity_locations.ActivityLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockActivityLocationServiceMockRecorder) Create(activityLocation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActivityLocationService)(nil).Create), activityLocation)
}

// Delete mocks base method.
func (m *MockActivityLocationService) Delete(id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockActivityLocationServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockActivityLocationService)(nil).Delete), id)
}

// Read mocks base method.
func (m *MockActivityLocationService) Read(id string) (activity_locations.ActivityLocation, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", id)
	ret0, _ := ret[0].(activity_locations.ActivityLocation)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockActivityLocationServiceMockRecorder) Read(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockActivityLocationService)(nil).Read), id)
}

// ReadAll mocks base method.
func (m *MockActivityLocationService) ReadAll() ([]activity_locations.ActivityLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll")
	ret0, _ := ret[0].([]activity_locations.ActivityLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockActivityLocationServiceMockRecorder) ReadAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockActivityLocationService)(nil).ReadAll))
}

// Update mocks base method.
func (m *MockActivityLocationService) Update(id string, activityLocation activity_locations.ActivityLocation) (activity_locations.ActivityLocation, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, activityLocation)
	ret0, _ := ret[0].(activity_locations.ActivityLocation)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockActivityLocationServiceMockRecorder) Update(id, activityLocation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockActivityLocationService)(nil).Update), id, activityLocation)
}
