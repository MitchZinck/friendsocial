// Code generated by MockGen. DO NOT EDIT.
// Source: activities/activity_handler.go

// Package test_activities is a generated GoMock package.
package test_activities

import (
	activities "friendsocial/activities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockActivityService is a mock of ActivityService interface.
type MockActivityService struct {
	ctrl     *gomock.Controller
	recorder *MockActivityServiceMockRecorder
}

// MockActivityServiceMockRecorder is the mock recorder for MockActivityService.
type MockActivityServiceMockRecorder struct {
	mock *MockActivityService
}

// NewMockActivityService creates a new mock instance.
func NewMockActivityService(ctrl *gomock.Controller) *MockActivityService {
	mock := &MockActivityService{ctrl: ctrl}
	mock.recorder = &MockActivityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityService) EXPECT() *MockActivityServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockActivityService) Create(activity activities.Activity) (activities.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", activity)
	ret0, _ := ret[0].(activities.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockActivityServiceMockRecorder) Create(activity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActivityService)(nil).Create), activity)
}

// Delete mocks base method.
func (m *MockActivityService) Delete(id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockActivityServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockActivityService)(nil).Delete), id)
}

// Read mocks base method.
func (m *MockActivityService) Read(id string) (activities.Activity, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", id)
	ret0, _ := ret[0].(activities.Activity)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockActivityServiceMockRecorder) Read(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockActivityService)(nil).Read), id)
}

// ReadAll mocks base method.
func (m *MockActivityService) ReadAll() ([]activities.Activity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll")
	ret0, _ := ret[0].([]activities.Activity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockActivityServiceMockRecorder) ReadAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockActivityService)(nil).ReadAll))
}

// Update mocks base method.
func (m *MockActivityService) Update(id string, activity activities.Activity) (activities.Activity, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, activity)
	ret0, _ := ret[0].(activities.Activity)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockActivityServiceMockRecorder) Update(id, activity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockActivityService)(nil).Update), id, activity)
}
