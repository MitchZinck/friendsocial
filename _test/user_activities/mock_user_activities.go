// Code generated by MockGen. DO NOT EDIT.
// Source: user_activities/user_activity_handler.go

// Package test_user_activities is a generated GoMock package.
package test_user_activities

import (
	user_activities "friendsocial/user_activities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserActivityService is a mock of UserActivityService interface.
type MockUserActivityService struct {
	ctrl     *gomock.Controller
	recorder *MockUserActivityServiceMockRecorder
}

// MockUserActivityServiceMockRecorder is the mock recorder for MockUserActivityService.
type MockUserActivityServiceMockRecorder struct {
	mock *MockUserActivityService
}

// NewMockUserActivityService creates a new mock instance.
func NewMockUserActivityService(ctrl *gomock.Controller) *MockUserActivityService {
	mock := &MockUserActivityService{ctrl: ctrl}
	mock.recorder = &MockUserActivityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserActivityService) EXPECT() *MockUserActivityServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserActivityService) Create(userActivity user_activities.UserActivity) (user_activities.UserActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userActivity)
	ret0, _ := ret[0].(user_activities.UserActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserActivityServiceMockRecorder) Create(userActivity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserActivityService)(nil).Create), userActivity)
}

// Delete mocks base method.
func (m *MockUserActivityService) Delete(id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUserActivityServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserActivityService)(nil).Delete), id)
}

// Read mocks base method.
func (m *MockUserActivityService) Read(id string) (user_activities.UserActivity, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", id)
	ret0, _ := ret[0].(user_activities.UserActivity)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockUserActivityServiceMockRecorder) Read(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockUserActivityService)(nil).Read), id)
}

// ReadAll mocks base method.
func (m *MockUserActivityService) ReadAll() ([]user_activities.UserActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll")
	ret0, _ := ret[0].([]user_activities.UserActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockUserActivityServiceMockRecorder) ReadAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockUserActivityService)(nil).ReadAll))
}

// Update mocks base method.
func (m *MockUserActivityService) Update(id string, userActivity user_activities.UserActivity) (user_activities.UserActivity, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, userActivity)
	ret0, _ := ret[0].(user_activities.UserActivity)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockUserActivityServiceMockRecorder) Update(id, userActivity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserActivityService)(nil).Update), id, userActivity)
}
